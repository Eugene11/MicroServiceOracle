Index: src/main/java/com/tallink/clientmatching/service/SearchResultField.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/tallink/clientmatching/service/SearchResultField.java	(revision 60:8ec196a8780aed3486a7b57567674b166f160134)
+++ src/main/java/com/tallink/clientmatching/service/SearchResultField.java	(revision 60+:8ec196a8780a+)
@@ -6,7 +6,7 @@
 import static java.util.stream.Collectors.toList;
 
 public enum SearchResultField {
-    FULL_NAME, EMAIL, PHONE_NUMBER, CLUB_ACCOUNT, CLIENT_ID, CLUB_ACCOUNT_TYPE, ADDRESS, ZIP_CITY, BIRTHDAY;
+    FULL_NAME, EMAIL, PHONE_NUMBER, CLUB_ACCOUNT, CLIENT_ID, CLUB_ACCOUNT_TYPE, ADDRESS, ZIP_CITY, BIRTHDAY, FIRST_NAME, LAST_NAME;
 
     static Collection<String> allSearchResultFieldNames() {
         return Arrays.asList(SearchResultField.values())
Index: src/main/java/com/tallink/clientmatching/service/ClientSearchSql.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/tallink/clientmatching/service/ClientSearchSql.java	(revision 60:8ec196a8780aed3486a7b57567674b166f160134)
+++ src/main/java/com/tallink/clientmatching/service/ClientSearchSql.java	(revision 60+:8ec196a8780a+)
@@ -3,7 +3,9 @@
 public enum ClientSearchSql {
     BASE_REQUEST("classpath:sql/client-matching-base-request.sql"),
     EMAIL("classpath:sql/client-matching-email.sql"),
+    EMAILS("classpath:sql/client-matching-emails.sql"),
     PHONE("classpath:sql/client-matching-phone.sql"),
+    PHONES("classpath:sql/client-matching-phones.sql"),
     CLUBONE("classpath:sql/client-matching-clubone.sql"),
     CLUBONE_AND_FIRST_AND_LAST_NAMES("classpath:sql/client-matching-clubone-and-first-and-last-names.sql"),
     FULLNAME("classpath:sql/client-matching-fullname.sql");
Index: src/main/resources/sql/client-matching-phones.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/sql/client-matching-phones.sql	(revision 60+:8ec196a8780a+)
+++ src/main/resources/sql/client-matching-phones.sql	(revision 60+:8ec196a8780a+)
@@ -0,0 +1,4 @@
+t.household_id IN
+  (SELECT hp.household_id
+  FROM seaware.household_phone hp
+  WHERE hp.phone_number IN (:PHONES) )
\ No newline at end of file
Index: src/main/resources/sql/client-matching-emails.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/sql/client-matching-emails.sql	(revision 60+:8ec196a8780a+)
+++ src/main/resources/sql/client-matching-emails.sql	(revision 60+:8ec196a8780a+)
@@ -0,0 +1,1 @@
+UPPER(t.email) IN (:EMAILS)
\ No newline at end of file
Index: src/main/resources/sql/client-matching-base-request.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/sql/client-matching-base-request.sql	(revision 60:8ec196a8780aed3486a7b57567674b166f160134)
+++ src/main/resources/sql/client-matching-base-request.sql	(revision 60+:8ec196a8780a+)
@@ -1,5 +1,7 @@
 SELECT
   t.FULL_NAME,
+  t.FIRST_NAME,
+  t.LAST_NAME,
   t.CLIENT_ID ,
   TO_CHAR(t.BIRTHDAY, 'DD.MM.YYYY') BIRTHDAY,
   t.email,
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pom.xml	(revision 60:8ec196a8780aed3486a7b57567674b166f160134)
+++ pom.xml	(revision 60+:8ec196a8780a+)
@@ -51,6 +51,7 @@
         <swagger.version>2.5.0</swagger.version>
         <spring.boot.version>1.3.6.RELEASE</spring.boot.version>
         <cglib.nodep.version>3.1</cglib.nodep.version>
+        <lombok.version>1.16.10</lombok.version>
     </properties>
 
     <dependencyManagement>
@@ -149,6 +150,11 @@
         <dependency>
             <groupId>org.codehaus.groovy</groupId>
             <artifactId>groovy-all</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+            <version>${lombok.version}</version>
         </dependency>
     </dependencies>
 
Index: src/main/java/com/tallink/clientmatching/service/ClientMatcher.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/tallink/clientmatching/service/ClientMatcher.java	(revision 60:8ec196a8780aed3486a7b57567674b166f160134)
+++ src/main/java/com/tallink/clientmatching/service/ClientMatcher.java	(revision 60+:8ec196a8780a+)
@@ -1,7 +1,6 @@
 package com.tallink.clientmatching.service;
 
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.stereotype.Component;
+import lombok.AllArgsConstructor;
 
 import java.util.*;
 
@@ -15,18 +14,79 @@
 import static java.util.Collections.singletonList;
 import static java.util.stream.Collectors.toList;
 import static java.util.stream.Collectors.toMap;
+import static java.util.stream.Collectors.toSet;
 
-@Component
+@AllArgsConstructor
 public class ClientMatcher {
 
-    private final ClientSearchFactory queryFactory;
-
     public static final String MAP_BEST_MATCH = "Best match";
     public static final String MAP_OTHERS = "Others";
 
-    @Autowired
-    public ClientMatcher(ClientSearchFactory queryFactory) {
-        this.queryFactory = queryFactory;
+    private ClientSearchFactory queryFactory;
+
+    private String email;
+
+    private String phoneNumber;
+
+    private String countryCode;
+
+    private String clubOneNumber;
+
+    private String firstName;
+
+    private String lastName;
+
+    public Map<String, Object> match() {
+        List<Map<String, Object>> searchResults =
+                searchForEachField(Optional.ofNullable(email),
+                        Optional.ofNullable(phoneNumber),
+                        Optional.ofNullable(countryCode),
+                        Optional.ofNullable(clubOneNumber),
+                        Optional.ofNullable(firstName),
+                        Optional.ofNullable(lastName));
+
+        Optional<Map<String, Object>> bestMatch = pickBestMatch(searchResults);
+        if (bestMatch.isPresent()) return mapResults(bestMatch, searchResults);
+
+        if (phoneNumber != null) searchResults = searchByEmails(searchResults);
+        else if (email != null) searchResults = searchByPhoneNumbers(searchResults);
+        bestMatch = pickBestMatch(searchResults);
+        return mapResults(bestMatch, searchResults);
+    }
+
+    private Optional<Map<String, Object>> pickBestMatch(List<Map<String, Object>> searchResults) {
+        // If we got first name and last name, try pick from CO account holders with exact CO number, FN and LN
+        // Otherwise try pick from MAIN account holders
+        if (this.clubOneNumber != null && this.firstName != null && this.lastName != null)
+            return tryPickByClubOneFirstNameLastName(searchResults);
+        else
+            return tryPickFromMainClubAccountHolders(searchResults);
+
+    }
+
+    private Optional<Map<String, Object>> tryPickByClubOneFirstNameLastName(List<Map<String, Object>> searchResults) {
+        List<Map<String, Object>> clients = searchResults.stream()
+                .filter(item ->
+                        item.get(CLUB_ACCOUNT.name()) != null &&
+                                item.get(CLUB_ACCOUNT.name()).equals(this.clubOneNumber) &&
+                                item.get(FIRST_NAME.name()) != null &&
+                                item.get(FIRST_NAME.name()).equals(this.firstName) &&
+                                item.get(LAST_NAME.name()) != null &&
+                                item.get(LAST_NAME.name()).equals(this.lastName)
+                )
+                .collect(toList());
+        return clients.stream().findFirst();
+    }
+
+    private List<Map<String, Object>> searchByEmails(List<Map<String, Object>> searchResults) {
+        Collection<String> emailsFiltered = searchResults.stream().map( r-> r.get(EMAIL.name()).toString() ).collect(toSet());
+        return parallelSearch(singletonList(queryFactory.searchByEmails(emailsFiltered)));
+    }
+
+    private List<Map<String, Object>> searchByPhoneNumbers(List<Map<String, Object>> searchResults) {
+        Collection<String> phonesFiltered = searchResults.stream().map( r->
+                r.get(PHONE_NUMBER.name()).toString().substring(r.get(PHONE_NUMBER.name()).toString().indexOf('-')+1) ).collect(toSet());
+        return parallelSearch(singletonList(queryFactory.searchByPhones(phonesFiltered)));
     }
 
     public Map<String, Object> loadClientList(Optional<String> email, Optional<String> phoneNumber,
\ No newline at end of file
Index: src/main/java/com/tallink/clientmatching/web/controller/ClientMatchingController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/tallink/clientmatching/web/controller/ClientMatchingController.java	(revision 60:8ec196a8780aed3486a7b57567674b166f160134)
+++ src/main/java/com/tallink/clientmatching/web/controller/ClientMatchingController.java	(revision 60+:8ec196a8780a+)
@@ -1,6 +1,7 @@
 package com.tallink.clientmatching.web.controller;
 
 import com.tallink.clientmatching.service.ClientMatcher;
+import com.tallink.clientmatching.service.ClientSearchFactory;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.propertyeditors.StringTrimmerEditor;
 import org.springframework.web.bind.WebDataBinder;
@@ -8,21 +9,18 @@
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.RestController;
-
 import java.util.Map;
-
-import static java.util.Optional.ofNullable;
 import static org.springframework.web.bind.annotation.RequestMethod.GET;
 
 @RestController
 @RequestMapping("api")
 public class ClientMatchingController {
 
-    private final ClientMatcher matcher;
+    private final ClientSearchFactory clientSearchFactory;
 
     @Autowired
-    public ClientMatchingController(ClientMatcher matcher) {
-        this.matcher = matcher;
+    public ClientMatchingController(ClientSearchFactory factory) {
+        this.clientSearchFactory = factory;
     }
 
     @InitBinder // To treat empty strings as nulls
@@ -34,10 +32,11 @@
     public Map<String, Object> list(
             @RequestParam(value = "email", required = false) String email,
             @RequestParam(value = "phone", required = false) String phoneNumber,
-            @RequestParam(value = "phoneCode", required = false) String phoneCode,
+            @RequestParam(value = "countryCode", required = false) String countryCode,
             @RequestParam(value = "clubOne", required = false) String clubOneNumber,
             @RequestParam(value = "firstName", required = false) String firstName,
             @RequestParam(value = "lastName", required = false) String lastName) {
-        return matcher.loadClientList(ofNullable(email), ofNullable(phoneNumber), ofNullable(phoneCode), ofNullable(clubOneNumber), ofNullable(firstName), ofNullable(lastName));
+        return new ClientMatcher(clientSearchFactory, email, phoneNumber,
+                countryCode, clubOneNumber, firstName, lastName).match();
     }
 }
